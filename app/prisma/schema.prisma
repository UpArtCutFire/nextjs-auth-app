generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/nextjs-auth-app/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  nombre           String
  correo           String    @unique
  rut              String    @unique
  activo           Boolean   @default(true)
  perfil           String    // "administrador" or "vendedor"
  codigo_vendedor  String?
  porcentaje_comision Float?
  comision_base    Float?
  password         String    // Campo para almacenar contraseña hasheada
  
  // Campos NextAuth (adaptados)
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  paymentVerifications PaymentVerification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum PaymentMethod {
  efectivo
  transferencia
  webpay
}

model PaymentVerification {
  id               String   @id @default(cuid())
  documentNumber   String   // Número del documento (NumDoc)
  documentType     String   // Tipo de documento (TipoDoc)
  vendorCode       String   // Código del vendedor
  photoUrl         String?  // URL de la foto subida (opcional para efectivo)
  comment          String   // Comentario del vendedor
  documentInfo     String   // JSON con información adicional del documento
  paymentMethod    PaymentMethod // Método de pago utilizado
  
  // Relación con usuario vendedor
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Índices para optimizar búsquedas
  @@index([documentNumber, documentType])
  @@index([vendorCode])
  @@index([userId])
}
